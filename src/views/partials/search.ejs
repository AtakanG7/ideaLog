<style>
  .searchBar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    backdrop-filter: blur(3px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999999 !important;
  }

  .searchBar .search__form {
    display: flex;
    align-items: center;
  }

  .content-custom {
    width: 100%;
    padding: 20px;
    display: flex;
    flex-direction: column;
    overflow-y: scroll !important;
    height: 85vh !important;
  }

  .searchBar .search__form input[type="search"] {
    flex: 1;
    padding: 0.5rem 1rem;
    border: 1px solid #ccc;
    border-radius: 0.25rem;
    font-size: 1rem;
  }


</style>

<div id="seacrhBar" class="searchBar p-5 w-100" style="display: none;">
  <div class="m-auto d-flex flex-col items-center justify-center w-100">
    <div class="flex flex-row items-center justify-center no-wrap">
      <label class="input input-bordered flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4 opacity-70"><path fill-rule="evenodd" d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z" clip-rule="evenodd" /></svg>
        <input onkeydown="event.key === 'Enter' && fetchArticales()"
          class="w-100 grow"
          type="search"
          aria-label="Search"
          id="searchInput"
          name="searchTerm"
          placeholder="Search on the site..." />
          <div id="searchClose" class="btn btn-circle btn-ghost" aria-label="Close">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="w-5 h-5 stroke-current">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </div>
      </label>
    </div>
    <div id="searchBar" class="content-custom content flex w-100"></div>
  </div>
</div>

<script>

  const searchBar = document.getElementById('seacrhBar');
  const searchInput = document.getElementById('searchInput');
  const searchClose = document.getElementById('searchClose');
  const searchTerm = document.getElementsByName('searchTerm')[0];
  let sent = false;
  // Check the input value in some period when user is typing if is changing less than 1 second per letter then fetch the articales
  // Make sure its not fired multiple times when user is typing
  searchInput.addEventListener('input',async () => {
    if (searchInput.value.length > 0 && !sent) 
      {
        const timer = setTimeout(() => {
          sent = true
          console.log('sent')
          fetchArticales();
        }, 1000);
        clearTimeout(timer);
    }
  }); 

  searchClose.addEventListener('click', () => {
      searchBar.style.display = 'none';
  })

  // Fetch the articales by fetching server with the values
  async function fetchArticales() {
    const response = await fetch(`/blogs/q?q=${searchInput.value}`);
    const data = await response.json();
    console.log(data)
    sent = false;
    // display the results in the content div
    document.getElementById('searchBar').style.display = 'block';
    const content = document.getElementsByClassName('content')[0];
    content.innerHTML = '';
    data.forEach((article) => {
        content.innerHTML += `
          <div class="card shadow-lg compact bg-white text-black my-2 ">
            <div class="card-body d-flex justify-content-between">
              <div>
                <a href="/blogs/${article.url}" class="text-lg text-dark font-bold hover:text-blue-600 hover:text-blue-700 hover:underline">
                  ${article.title} - <span class="text-muted">${article.authorMetadata.name}</span>
                </a>
                <p class="text-sm">${article.description}</p>
                <p class="text-xs text-gray-500">Published on: ${new Date(article.publishedAt).toLocaleDateString()}</p>
              </div>
              <div class="flex flex-row justify-end">
                <p class="text-sm text-gray-600 flex justify-center">Comments: ${article.comments.length}</p>
                <p class="text-sm text-gray-600 flex justify-center">Likes: ${article.likes}</p>
                <p class="text-sm text-gray-600 flex justify-center">Views: ${article.views}</p>
              </div>
            </div>
          </div>
        `;
      });
  }
</script>